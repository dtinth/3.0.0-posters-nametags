import React from 'react'
import ReactDOM from 'react-dom'
import './index.css'
import './design'
import {
  HashRouter as Router,
  Route,
  Link,
  Switch,
  Redirect
} from 'react-router-dom'

function Text({ children, tight, weight }) {
  return (
    <span style={{ letterSpacing: tight ? '-0.05em' : 0, fontWeight: weight }}>
      {children}
    </span>
  )
}
function At() {
  return <span style={{ opacity: 0.5, margin: '0' }}> @ </span>
}

export const speakers = {
  gucode: (
    <Speaker
      name={
        <Text tight>
          Jirat Kijlerdpornpailoj &<br />Suwitcha Sugthana (Gucode)
        </Text>
      }
      position=""
      title={
        <Text>
          Build Awesome Static Website<br /> with Gatsby.js
        </Text>
      }
      description={
        <Text>
          <Text weight={400}>‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏û‡∏≤‡∏ó‡∏∏‡∏Å‡∏ó‡πà‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡∏ä‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Gucode</Text>
          <br />
          <span style={{ letterSpacing: '-0.025em' }}>
            ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ Gatsby.js ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô static site generator for
            React ‡πÅ‡∏•‡πâ‡∏ß deploy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á GitHub Pages
          </span>
        </Text>
      }
      photo={require('./photo/gucode.png')}
    />
  ),
  keya_desai: (
    <Speaker
      name="Keya Desai"
      position={
        <Text>
          Lead Consultant Developer<br />ThoughtWorks
        </Text>
      }
      title="Animating in React"
      descriptionScale={7 / 8}
      description="Join in the fun as I will demonstrate how animations can be applied to add style and substance to any page and how to develop simple animated micro interactions with ease using react"
      photo={require('./photo/keya.jpg')}
    />
  ),
  manatsawin_hanmongkolchai: (
    <Speaker
      name="Manatsawin Hanmongkolchai"
      position={
        <div>
          Junior Architect<At />Wongnai
        </div>
      }
      title="State Management with MobX"
      description={
        <div style={{ fontWeight: 300 }}>
          <div style={{ fontWeight: 400 }}>‡πÉ‡∏Ñ‡∏£‡∏ß‡πà‡∏≤ React ‡∏°‡∏µ‡πÅ‡∏Ñ‡πà Redux?</div>
          ‡∏°‡∏≤‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ö MobX ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ state management<br />
          ‡πÉ‡∏ô‡πÅ‡∏≠‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏á‡πà‡∏≤‡∏¢‡∏¢‡∏¢
        </div>
      }
      photo={require('./photo/manatsawin.png')}
    />
  ),
  phoomparin_mano: (
    <Speaker
      name="Phoomparin Mano"
      position={
        <div>
          Developer<At />iTAX
        </div>
      }
      title="Fast and Furious Development with React Design Patterns üî•"
      description="How you can use a set of Design Patterns to make your codebase easier to reason about and more concise to write, so you can express your ideas and ship to production in record time."
      descriptionScale={9 / 10}
      photo={require('./photo/phoom.jpg')}
    />
  ),
  jessada_trirongkit: (
    <Speaker
      name="Jessada Trirongkit"
      position={
        <div>
          Software Engineer<At />Oozou
        </div>
      }
      title="It's Next.js but it's static and it's fast"
      description={
        <Text>
          How I optimized, configured, and accelerated my Next.js
          static-exported site with data splitting and prefetching.
        </Text>
      }
      photo={require('./photo/aun.jpg')}
    />
  ),
  veha_suwatphisankij: (
    <Speaker
      name="Veha Suwatphisankij"
      position={
        <div>
          Full Stack Engineer <At /> Appsmith Thailand
        </div>
      }
      title={
        <Text tight>
          {/* React and Redux in Another Perspective: */}
          How Writing Web Apps in ClojureScript Can Help You Shape Idea of React
          Better
        </Text>
      }
      description={
        <Text tight>
          React fundamental idea is data-driven, functional view, view result
          based only on data (prop and state). and redux is functional data flow
          with immutable data store framework. but when Implement that idea on
          language that does not fit the idea, the result can be cumbersome. in
          the parallel world, the Clojurescript fundamental idea is immutable,
          functional programming and data-driven. In this talk, I will show you
          how each piece of the idea fit together in Cljs, "reagent" and
          "re-frame" (react and redux in Cjls world). and hopefully, you can
          pick some idea from Cljs to your current react project
        </Text>
      }
      descriptionScale={4 / 5}
      photo={require('./photo/veha.jpg')}
    />
  ),
  christopher_ng: (
    <Speaker
      name="Christopher Ng"
      position={
        <div>
          Mobile developer<At />Event Pop
        </div>
      }
      title="Kotlin ‚ù§Ô∏è  React"
      description={
        <div>
          Kotlin ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Å‡πá‡∏£‡∏±‡∏Å React <br />
          ‡∏°‡∏≤‡∏î‡∏π‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ú‡∏™‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏≠‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£
        </div>
      }
      photo={require('./photo/babe.jpg')}
    />
  ),
  cal_komkanit: (
    <Speaker
      name="Cal Komkanit"
      position={
        <div>
          Intern<At />Jitta
        </div>
      }
      title={
        <div>
          My First Time with GraphQL<br /> on Production
        </div>
      }
      description={
        <div>
          <Text weight={400} tight>
            ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ GraphQL ‡∏Ç‡∏∂‡πâ‡∏ô Production ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
          </Text>
          <br />
          ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ ‡πÅ‡∏•‡∏∞ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠ <br />‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
        </div>
      }
      photo={require('./photo/cal.jpg')}
    />
  ),
  rujira_aksornsin: (
    <Speaker
      name="Rujira Aksornsin"
      position={
        <div>
          Frontend Web Lead<At />AppMan
        </div>
      }
      title="React Performance Tuning"
      descriptionScale={7 / 8}
      description={
        <div>
          <Text weight={400}>
            ‡πÄ‡∏°‡∏∑‡πà‡∏≠ React app ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ó‡∏≥ ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÄ‡∏£‡πá‡∏ß‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
          </Text>
          <br />
          ‡∏°‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏∏‡∏î‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ app ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ smooth
          ‡πÅ‡∏ö‡∏ö 60fps ‡∏ñ‡∏∂‡∏á‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô mobile web<br /> ‡∏Å‡πá‡∏ô‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏•‡πà‡∏ô native app
          ‡∏≠‡∏¢‡∏π‡πà
        </div>
      }
      photo={require('./photo/holly.jpg')}
    />
  ),
  chakrit_likitkhajorn: (
    <Speaker
      name="Chakrit Likitkhajorn"
      position={
        <div>
          VP Engineering<At />Taskworld
        </div>
      }
      title="State Management in React Apps"
      descriptionScale={4 / 5}
      description={
        <div>
          <Text weight={400}>Redux, MobX, Flux pattern ‡∏´‡∏£‡∏∑‡∏≠ pure React?</Text>
          <br />
          ‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state ‡πÉ‡∏ô app ‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏ô talk ‡∏ô‡∏µ‡πâ <br />‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏°‡∏≤‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å‡∏Å‡∏±‡∏ô‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡∏ä‡∏≠‡∏ö
          Redux ‡∏ó‡∏≥‡πÑ‡∏°‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô‡∏ä‡∏≠‡∏ö MobX ‡∏ó‡∏≥‡πÑ‡∏° Dan ‡∏ñ‡∏∂‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏£‡∏µ‡∏ö‡πÉ‡∏ä‡πâ‡∏≠‡∏∞‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ pure
          React‚Äã<br /> ‡∏ï‡∏Å‡∏•‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏°‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
          ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ô‡πÅ‡∏ô‡πà‡∏ô‡∏∞ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ô
        </div>
      }
      offsetDescription={70}
      photo={require('./photo/chrisza.jpg')}
    />
  ),

  pallop_chaoputhipuchong: (
    <Speaker
      name="Pallop Chaoputhipuchong"
      position={<div>Software Engineer</div>}
      title="Testing React Applications"
      description={
        <Text>
          <Text weight={400}>
            Test ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤ ship software ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
          </Text>
          <br />
          ‡πÅ‡∏ï‡πà‡∏´‡∏≤‡∏Å test ‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏°‡∏±‡∏ô‡∏≠‡∏≤‡∏à‡∏ô‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏´‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏•‡∏≥‡∏ö‡∏≤‡∏Å
          ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏û‡∏≤‡πÑ‡∏õ‡∏î‡∏π‡∏ß‡πà‡∏≤ ‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πà ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô test
          ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏≤‡∏Å‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        </Text>
      }
      photo={require('./photo/ham.jpg')}
    />
  ),
  tananan_tangthanachaikul: (
    <Speaker
      name="Tananan Tangthanachaikul"
      position={
        <div>
          Full-stack Developer<At />TakeMeTour
        </div>
      }
      title={
        <div>Experience from building a mobile app using Expo & GraphQL</div>
      }
      // descriptionScale={4 / 5}
      description={
        <div>
          <Text weight={400}>‡∏´‡∏≤‡∏Å‡πÉ‡∏Ñ‡∏£‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ Expo ‡πÇ‡∏õ‡∏£‡∏î‡∏ü‡∏±‡∏á!</Text>
          <br />
          ‡∏à‡∏∞‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å (‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏£‡πâ‡∏≠‡∏ô) ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ Mobile App ‡∏î‡πâ‡∏ß‡∏¢
          Expo ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î <br /> ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏∞‡πÉ‡∏ä‡πâ Expo
        </div>
      }
      photo={require('./photo/benz.jpg')}
    />
  )
}

function App() {
  return (
    <Router>
      <Switch>
        <Route
          exact
          path="/"
          render={() => (
            <div>
              <SpeakerStudio />
              <hr />
              <div style={{ fontSize: 80, margin: '40px 0' }}>Example</div>
              {Object.keys(speakers).map(key => {
                const url = '/' + key
                return (
                  <Link to={url}>
                    <div style={{ display: 'inline-block', margin: 10 }}>
                      {speakers[key]}
                    </div>
                  </Link>
                )
              })}
            </div>
          )}
        />
        <Route
          path="/:key"
          render={({ match }) => {
            const speaker = speakers[match.params.key]
            if (!speaker) {
              return <Redirect to="/" />
            }
            return speaker
          }}
        />
      </Switch>
    </Router>
  )
}

class SpeakerStudio extends React.Component {
  state = {
    name: 'Name',
    position: 'Position',
    title: 'Talk Title Should Fit Inside a Single Line',
    description:
      'Talk description then goes on. Ideally, it should not be longer than three lines.',
    photo: require('./connor2.png'),
    scale: 1,
    descriptionScale: 1
  }
  render() {
    const renderField = k => (
      <div>
        <span style={{ fontSize: '60px' }}>{k}: </span>
        <input
          type="text"
          value={this.state[k]}
          onChange={e => {
            this.setState({ [k]: e.target.value })
          }}
          style={{ fontSize: '60px' }}
        />
      </div>
    )
    return (
      <div style={{ margin: '40px 10px' }}>
        <div style={{ fontSize: 80, marginBottom: 40 }}>
          React Bangkok 3.0.0 - Create your poster
          <br />
          <div style={{ fontSize: 40 }}>Zoom out to use it</div>
        </div>
        <div style={{ display: 'flex' }}>
          <div style={{ flex: 'none' }}>
            <Speaker
              {...this.state}
              scale={+this.state.scale}
              descriptionScale={+this.state.descriptionScale}
            />
          </div>
          <div style={{ flex: 'none', padding: 40, border: '1px solid #222' }}>
            {renderField('name')}
            {renderField('position')}
            {renderField('title')}
            {renderField('scale')}
            {renderField('photo')}
            <textarea
              value={this.state.description}
              onChange={e => {
                this.setState({ description: e.target.value })
              }}
              style={{ fontSize: '60px', width: '20em', height: '5em' }}
            />
            {renderField('descriptionScale')}
          </div>
        </div>
      </div>
    )
  }
}

function Speaker({
  name,
  position,
  title,
  description,
  photo,
  logo,
  scale = 1,
  descriptionScale = 1,
  offsetDescription = 0
}) {
  return (
    <div
      style={{
        background: `url(${require('./speaker_blank.png')})`,
        width: 1272,
        height: 1800,
        position: 'relative'
      }}
    >
      <div
        key={photo || 'default'}
        style={{
          position: 'absolute',
          width: 376,
          height: 376,
          top: 300,
          borderRadius: '50%',
          background: `url(${photo ||
            require('./connor2.png')}) center no-repeat`,
          backgroundSize: 'cover',
          overflow: 'hidden',
          left: '50%',
          marginLeft: 376 / -2
        }}
      />
      <div
        style={{
          position: 'absolute',
          left: 45,
          right: 45,
          top: 710,
          textAlign: 'center',
          color: 'white',
          fontFamily: `Metropolis`,
          fontSize: 60 * scale,
          lineHeight: `${90 * scale}px`
        }}
      >
        <div style={{ height: 270 - offsetDescription }}>
          <div style={{ color: '#00d8ff', fontWeight: 600 }}>{name}</div>
          <div style={{}}>{position}</div>
        </div>
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            height: 180
          }}
        >
          <div style={{ fontWeight: 700, flex: 1 }}>{title}</div>
        </div>
        <div
          style={{
            fontFamily: `Noto Sans Thai UI, Noto Sans`,
            fontSize: `${descriptionScale * 0.9}em`,
            lineHeight: `${90 * scale * descriptionScale}px`,
            fontWeight: 300
          }}
        >
          {description}
        </div>
      </div>
    </div>
  )
}

if (typeof document !== 'undefined') {
  ReactDOM.render(<App />, document.getElementById('root'))
  if (module.hot) {
    module.hot.accept(() => {})
  }
}
